# -*- mode: ruby -*-
# vi: set ft=ruby :

$init = <<SCRIPT

RUBY=$1
set -e
set -x

if which gcc htop curl screen vim > /dev/null; then
  echo "==> Packages are installed."
else
  echo 'provisioning...'
  export DEBIAN_FRONTEND=noninteractive
  aptitude update > /dev/null
  aptitude install -y build-essential htop curl screen vim
fi

SCRIPT

$ruby = <<SCRIPT

if su vagrant -l -c "rvm list | grep $RUBY" > /dev/null; then
  echo '==> Ruby is installed.'
else
  su vagrant -c '\\curl -L https://get.rvm.io | bash -s stable'
  su vagrant -c 'source .bash_profile && rvm requirements'
  echo "installing $RUBY"
  su vagrant -c "source .bash_profile && rvm install $RUBY"
  echo '--> trusting /vagrant/.rvmrc'
  su vagrant -c 'source .bash_profile && rvm rvmrc trust /vagrant'
fi

SCRIPT

$rails = <<SCRIPT

if dpkg --get-selections | grep libmysqlclient-dev > /dev/null && dpkg --get-selections | grep libmagickwand-dev > /dev/null; then
  echo "==> Rails dependencies are installed."
else
  echo '--> installing native dependencies...'
  aptitude install -y libmysqlclient-dev libmagickwand-dev
fi

if cat /home/vagrant/.bashrc | grep "cd /vagrant" > /dev/null; then
  echo "==> .bashrc configured."
else
  echo '--> adding cd /vagrant to .bash_profile ...'
  su vagrant -c 'echo -e "cd /vagrant\n" >> ~/.bash_profile'
fi

echo '--> bundling...'
su vagrant -c 'source .bash_profile && cd /vagrant && bundle install'
echo '--> bundle installed successfully. Remember to migrate your db.'

SCRIPT

$armageddon = <<SCRIPT
echo '--> purging and loading db...'
su vagrant -c 'source .bash_profile && cd /vagrant && rake db:armageddon'
su vagrant -c 'source .bash_profile && cd /vagrant && rake db:sample_data:all:create'
SCRIPT

$server = <<SCRIPT
echo '--> starting screen for server...'
su vagrant -c 'source .bash_profile && cd /vagrant && screen -AmdS rails_server'
echo '--> starting server...'
su vagrant -c 'source .bash_profile && cd /vagrant && screen -S rails_server -p 0 -X stuff "rails s
"'
SCRIPT

$console = <<SCRIPT
echo '--> starting screen for console...'
su vagrant -c 'source .bash_profile && cd /vagrant && screen -AmdS rails_console'
echo '--> starting console...'
su vagrant -c 'source .bash_profile && cd /vagrant && screen -S rails_console -p 0 -X stuff "rails c
"'
SCRIPT

$closeout = <<SCRIPT
date >> /home/vagrant/.vgboot
SCRIPT

$application = $init + $ruby + $rails + $closeout

Vagrant.configure("2") do |config|

  config.vm.define :mysql do |c|
    c.vm.box = "ubuntu_server_12_04"
    c.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--memory", 512]
    end
    c.vm.network :private_network, ip: "192.168.10.3"
    c.vm.hostname = 'mdhq-mysql'

    c.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "~/cookbooks"
      chef.add_recipe "mysql::server"
      chef.add_recipe "mysql::client"
      # You may also specify custom JSON attributes:
      chef.json = {
        :mysql => {
          :server_root_password => "rootpwd",
          :server_debian_password => "dbnpwd",
          :server_repl_password => "rplpwd",
          :bind_address => '192.168.10.3'
        }
      }
    end
  end

  config.vm.define :redis do |c|
    c.vm.box = "ubuntu_server_12_04"
    c.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--memory", 512]
    end
    c.vm.network :private_network, ip: "192.168.10.4"
    c.vm.hostname = 'mdhq-redis'

    c.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "~/cookbooks"
      chef.add_recipe "redisio::install"
      chef.add_recipe "redisio::enable"
      # You may also specify custom JSON attributes:
      chef.json = {
        :redisio => {
          :safe_install => false,
          :version => '2.6.7',
          :servers => [],
        }
      }
    end
  end

  config.vm.define :server do |c|
    c.vm.box = "precise64"
    c.vm.box_url = "http://files.vagrantup.com/precise64.box"
    c.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--memory", 512]
    end
    c.vm.network :private_network, ip: "192.168.10.2"
    c.vm.network :forwarded_port, guest: 3000, host: 3000, auto_correct: true
    #c.vm.network :public_network
    c.vm.hostname = 'rails-s'
    c.vm.provision :shell do |s|
      s.inline = $application + $server
      s.args = "'1.9.3-p385'"
    end
  end

  config.vm.define :console do |c|
    c.vm.box = "precise64"
    c.vm.box_url = "http://files.vagrantup.com/precise64.box"
    c.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--memory", 512]
    end
    c.vm.network :private_network, ip: "192.168.10.6"
    c.vm.hostname = 'rails-c'
    c.vm.provision :shell do |s|
      s.inline = $application + $console
      s.args = "'1.9.3-p385'"
    end
  end

  config.vm.define :spec do |c|
    c.vm.box = "precise64"
    c.vm.box_url = "http://files.vagrantup.com/precise64.box"
    c.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--memory", 512]
    end
    c.vm.network :private_network, ip: "192.168.10.7"
    c.vm.hostname = 'spec'
    c.vm.provision :shell do |s|
      s.inline = $application
      s.args = "'1.9.3-p385'"
    end
  end

  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  # config.vm.box = "mdhq_base"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Adjust memory
  # config.vm.customize ["modifyvm", :id, "--memory", 2048]

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 3000, 3000

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # IF you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
